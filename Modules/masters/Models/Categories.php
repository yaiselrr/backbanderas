<?php

/**Generate by ASGENS
 * @author virtualspot
 * @date Mon Jul 22 08:43:53 GMT-04:00 2024
 * @time Mon Jul 22 08:43:53 GMT-04:00 2024
 */


namespace Modules\masters\Models;


use App\Models\BaseModel;
use Exception;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Storage;
use Modules\manage\Models\Products;

/**
 * Este es la clase modelo para la tabla categories.
 *
 * Los siguientes son los campos de la tabla 'categories':
 * @property integer $id
 * @property integer $category_id
 * @property string $description
 * @property string $name
 * @property string $slug
 * @property string $image
 * @property Carbon $deleted_at
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * Los siguientes son las relaciones de este modelo :
 * @property Categories $category
 * @property Categories[] $array_categories
 * @property Products[] $array_product
 **/
class Categories extends BaseModel
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'categories';

    /**
     * The connection name for the model.
     *
     * @var string|null
     */
    protected $connection = 'db';

    /**
     * The primarykey associated with the table-model.
     *
     * @var integer
     */
    protected $primaryKey = 'id';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */

    public $timestamps = true;


    /**
     * The "type" of the auto-incrementing ID.
     *
     * @var string
     */
    protected $keyType = 'integer';

    const RELATIONS = ['category', 'array_categories'];

    /**
     * The number of models to return for pagination.
     *
     * @var int
     */
    protected $perPage = 15;

    protected $appends = ['category_image'];

    /**
     * Model Class Name
     *
     * @var string
     */
    const MODEL = 'Categories';
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'id',
        'category_id',
        'description',
        'name',
        'slug',
        'image',
        'deleted_at',
        'created_at',
        'updated_at'
    ];

    public function getCategoryImageAttribute()
    {
        $image = $this->image != "category.png" ? $this->image : "categories/" . $this->image;
        return Storage::disk('public')->url($image);
    }

    static function uploadFile($file, BaseModel $model)
    {
        $address = "categories/category_" . $model->id;
        Storage::disk('public')->putFileAs($address, $file, $file->getClientOriginalName());
        $model->image = $address . '/' . $file->getClientOriginalName();
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function (BaseModel $model) {
            $model->save();
        });
        self::updating(function (BaseModel $model) {
            $file = count(request()->allFiles()) > 0 ? request()->allFiles()['image'] : [];
            if ($file)
                self::uploadFile($file, $model);
        });
    }

    /**
     * Get the category
     */
    public function category()
    {
        return $this->belongsTo(Categories::class, 'category_id', 'id');
    }

    /**
     *
     * Get array_categories
     */
    public function array_categories()
    {
        return $this->hasMany(Categories::class, 'category_id', 'id');
    }

    public function descendants()
    {
        return $this->array_categories()->with('descendants');
    }



    /* Many to many relationships */



    protected function rules($scenario = 'create')
    {
        $rules = include(__DIR__ . '/../Rules/CategoriesRule.php');
        if (!isset($rules[$scenario]))
            throw new Exception('Scenario ' . $scenario . ' not exist');
        return $rules[$scenario];
    }
}
