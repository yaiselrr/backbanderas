<?php

/**Generate by ASGENS
 *@author virtualspot  
 *@date Mon Jul 22 08:43:53 GMT-04:00 2024  
 *@time Mon Jul 22 08:43:53 GMT-04:00 2024  
 */


namespace Modules\settings\Models;


use App\Models\BaseModel;

use Exception;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Storage;

/**
 * Este es la clase modelo para la tabla message_blocks.
 *
 * Los siguientes son los campos de la tabla 'message_blocks':
 * @property integer $id
 * @property string $name
 * @property string $color
 * @property string $message_text
 * @property string $image
 * @property Carbon $created_at
 * @property Carbon $updated_at

 * Los siguientes son las relaciones de este modelo :

 **/



class Message_blocks extends BaseModel
{
  /**
   * The table associated with the model.
   *
   * @var string
   */
  protected $table = 'message_blocks';

  /**
   * The connection name for the model.
   *
   * @var string|null
   */
  protected $connection = 'db';

  /**
   * The primarykey associated with the table-model.
   *
   * @var integer
   */
  protected $primaryKey = 'id';

  /**
   * Indicates if the model should be timestamped.
   *
   * @var bool
   */

  public $timestamps = true;


  /**
   * The "type" of the auto-incrementing ID.
   *
   * @var string
   */
  protected $keyType = 'integer';

  const RELATIONS = [];

  /**
   * The number of models to return for pagination.
   *
   * @var int
   */
  protected $perPage = 15;

  protected $appends = ['block_image'];

  /**
   * Model Class Name
   *
   * @var string
   */
  const MODEL = 'Message_blocks';
  /**
   * The attributes that are mass assignable.
   *
   * @var array
   */
  protected $fillable = [
    'name',
    'color',
    'message_text',
    'image',
    'created_at',
    'updated_at'
  ];



  /* Many to many relationships */



  protected function rules($scenario = 'create')
  {
    $rules = include(__DIR__ . '/../Rules/Message_blocksRule.php');
    if (!isset($rules[$scenario]))
      throw new Exception('Scenario ' . $scenario . ' not exist');
    return $rules[$scenario];
  }

  public function getBlockImageAttribute()
  {
    $image = $this->image != "block.png" ? $this->image : "blocks/" . $this->image;
    return Storage::disk('public')->url($image);
  }

  static function uploadFile($file, BaseModel $model)
  {
    $address = "blocks/block_".$model->id ;
    Storage::disk('public')->putFileAs($address, $file, $file->getClientOriginalName());
    $model->image = $address . '/' . $file->getClientOriginalName();
  }

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub
    self::created(function (BaseModel $model) {
      $model->save();
    });
    self::updating(function (BaseModel $model) {
      $file = count(request()->allFiles()) > 0 ? request()->allFiles()['image'] : [];
      if ($file)
        self::uploadFile($file, $model);
    });
  }
}
